<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

	<!-- 可以扫描controller、service、...
	这里让扫描contro ller，指定controller的包
	 -->
	<context:component-scan base-package="com.index"></context:component-scan>
	
	<!-- 静态资源解析
	包括 ：js、css、img、..
	 -->

	 <mvc:resources location="/static/" mapping="/static/**"/>


		
	<!--注解映射器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/> -->
	<!--注解适配器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/> -->
	
	<!-- 使用 mvc:annotation-driven代替上边注解映射器和注解适配器配置
	mvc:annotation-driven默认加载很多的参数绑定方法，
	比如json转换解析器就默认加载了，如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
	实际开发时使用mvc:annotation-driven
	 -->
	<mvc:annotation-driven></mvc:annotation-driven>
	

	<!-- 视图解析器
	解析jsp解析，默认使用jstl标签，classpath下的得有jstl的包
	 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"/>
		<property name="suffix" value=".jsp"/>
	</bean>
	
	<!--&lt;!&ndash; 自定义参数绑定 &ndash;&gt;
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		&lt;!&ndash; 转换器 &ndash;&gt;
		<property name="converters">
			<list>
				&lt;!&ndash; 日期类型转换 &ndash;&gt;
				<bean class="cn.itcast.ssm.controller.converter.CustomDateConverter"/>
			</list>
		</property>
		
	
	</bean>-->
	
	<!--&lt;!&ndash; 校验器 &ndash;&gt;
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		&lt;!&ndash; hibernate校验器&ndash;&gt;
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		&lt;!&ndash; 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties &ndash;&gt;
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
&lt;!&ndash; 校验错误信息配置文件 &ndash;&gt;
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		&lt;!&ndash; 资源文件名&ndash;&gt;
		<property name="basenames">   
       	 <list>    
            <value>classpath:CustomValidationMessages</value> 
       	 </list>   
    	</property>
		&lt;!&ndash; 资源文件编码格式 &ndash;&gt;
		<property name="fileEncodings" value="utf-8" />
		&lt;!&ndash; 对资源文件内容缓存时间，单位秒 &ndash;&gt;
		<property name="cacheSeconds" value="120" />
	</bean>
	&lt;!&ndash; 全局异常处理器
	只要实现HandlerExceptionResolver接口就是全局异常处理器
	 &ndash;&gt;
	<bean class="cn.itcast.ssm.exception.CustomExceptionResolver"></bean>
	-->
	
	<!-- 文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<!--设置上传文件的最大尺寸为5MB-->
		<property name="maxUploadSize">
			<value>5242880</value>
		</property>
	</bean>

<mvc:interceptors>

	<mvc:interceptor>
		<mvc:mapping path="/**"/>
		<bean class="com.index.interceptor.LoginIntercepter"></bean>
	</mvc:interceptor>

</mvc:interceptors>
	
	
	
</beans>